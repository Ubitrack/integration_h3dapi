# - Find CALIBRATEDPHANTOM
# Find the native CALIBRATEDPHANTOM headers and libraries.
#
#  CALIBRATEDPHANTOM_INCLUDE_DIR -  where to find CalibratedPhantom/CalibratedPhantom.hh, etc.
#  CALIBRATEDPHANTOM_LIBRARIES    - List of libraries when using CALIBRATEDPHANTOM.
#  CALIBRATEDPHANTOM_FOUND        - True if CALIBRATEDPHANTOM found.

GET_FILENAME_COMPONENT(module_file_path ${CMAKE_CURRENT_LIST_FILE} PATH )

# Look for the header file.
FIND_PATH( CALIBRATEDPHANTOM_INCLUDE_DIR NAMES CalibratedPhantom/CalibratedPhantom.h
           PATHS $ENV{H3D_ROOT}/include
                 ../include
                 ${module_file_path}/../../include
                 ${module_file_path}/../../../CalibratedPhantom/include
           DOC "Path in which the file H3D/CalibratedPhantom.h is located." )
MARK_AS_ADVANCED(CALIBRATEDPHANTOM_INCLUDE_DIR)

IF( MSVC )
  SET( H3D_MSVC_VERSION 6 )
  SET( TEMP_MSVC_VERSION 1299 )
  WHILE( ${MSVC_VERSION} GREATER ${TEMP_MSVC_VERSION} )
    MATH( EXPR H3D_MSVC_VERSION "${H3D_MSVC_VERSION} + 1" )
    MATH( EXPR TEMP_MSVC_VERSION "${TEMP_MSVC_VERSION} + 100" )
  ENDWHILE( ${MSVC_VERSION} GREATER ${TEMP_MSVC_VERSION} )
  SET( CALIBRATEDPHANTOM_NAME "CalibratedPhantom_vc${H3D_MSVC_VERSION}" )
ELSE(MSVC)
  SET( CALIBRATEDPHANTOM_NAME calibratedphantom )
ENDIF( MSVC )

SET( DEFAULT_LIB_INSTALL "lib" )
IF( WIN32 )
  SET( DEFAULT_LIB_INSTALL "lib32" )
  IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    SET( DEFAULT_LIB_INSTALL "lib64" )
  ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
ENDIF( WIN32 )

# Look for the library.
FIND_LIBRARY( CALIBRATEDPHANTOM_LIBRARY NAMES ${CALIBRATEDPHANTOM_NAME}
              PATHS $ENV{H3D_ROOT}/../${DEFAULT_LIB_INSTALL}
                    ../../${DEFAULT_LIB_INSTALL}
                    ${module_file_path}/../../../${DEFAULT_LIB_INSTALL}
              DOC "Path to ${CALIBRATEDPHANTOM_NAME} library." )

FIND_LIBRARY( CALIBRATEDPHANTOM_DEBUG_LIBRARY NAMES ${CALIBRATEDPHANTOM_NAME}_d
              PATHS $ENV{H3D_ROOT}/../${DEFAULT_LIB_INSTALL}
                    ../../${DEFAULT_LIB_INSTALL}
                    ${module_file_path}/../../../${DEFAULT_LIB_INSTALL}
              DOC "Path to ${CALIBRATEDPHANTOM_NAME}_d library." )
MARK_AS_ADVANCED(CALIBRATEDPHANTOM_LIBRARY)
MARK_AS_ADVANCED(CALIBRATEDPHANTOM_DEBUG_LIBRARY)

IF(CALIBRATEDPHANTOM_LIBRARY OR CALIBRATEDPHANTOM_DEBUG_LIBRARY)
  SET( HAVE_CALIBRATEDPHANTOM_LIBRARY 1 )
ELSE(CALIBRATEDPHANTOM_LIBRARY OR CALIBRATEDPHANTOM_DEBUG_LIBRARY)
  SET( HAVE_CALIBRATEDPHANTOM_LIBRARY 0 )
ENDIF(CALIBRATEDPHANTOM_LIBRARY OR CALIBRATEDPHANTOM_DEBUG_LIBRARY)

# Copy the results to the output variables.
IF(CALIBRATEDPHANTOM_INCLUDE_DIR AND HAVE_CALIBRATEDPHANTOM_LIBRARY)

  SET(CALIBRATEDPHANTOM_FOUND 1)
  IF(CALIBRATEDPHANTOM_LIBRARY)
    SET(CALIBRATEDPHANTOM_LIBRARIES ${CALIBRATEDPHANTOM_LIBRARIES} optimized ${CALIBRATEDPHANTOM_LIBRARY} )
  ELSE(CALIBRATEDPHANTOM_LIBRARY)
    SET(CALIBRATEDPHANTOM_LIBRARIES ${CALIBRATEDPHANTOM_LIBRARIES} optimized ${CALIBRATEDPHANTOM_NAME} )
    MESSAGE( STATUS "CALIBRATEDPHANTOM release libraries not found. Release build might not work." )
  ENDIF(CALIBRATEDPHANTOM_LIBRARY)

  IF(CALIBRATEDPHANTOM_DEBUG_LIBRARY)
    SET(CALIBRATEDPHANTOM_LIBRARIES ${CALIBRATEDPHANTOM_LIBRARIES} debug ${CALIBRATEDPHANTOM_DEBUG_LIBRARY} )
  ELSE(CALIBRATEDPHANTOM_DEBUG_LIBRARY)
    SET(CALIBRATEDPHANTOM_LIBRARIES ${CALIBRATEDPHANTOM_LIBRARIES} debug ${CALIBRATEDPHANTOM_NAME}_d )
    MESSAGE( STATUS "CALIBRATEDPHANTOM debug libraries not found. Debug build might not work." )
  ENDIF(CALIBRATEDPHANTOM_DEBUG_LIBRARY)

  SET(CALIBRATEDPHANTOM_INCLUDE_DIR ${CALIBRATEDPHANTOM_INCLUDE_DIR} )
  SET(CALIBRATEDPHANTOM_LIBRARIES ${CALIBRATEDPHANTOM_LIBRARIES} )
ELSE(CALIBRATEDPHANTOM_INCLUDE_DIR AND HAVE_CALIBRATEDPHANTOM_LIBRARY)
  SET(CALIBRATEDPHANTOM_FOUND 0)
  SET(CALIBRATEDPHANTOM_LIBRARIES)
  SET(CALIBRATEDPHANTOM_INCLUDE_DIR)
ENDIF(CALIBRATEDPHANTOM_INCLUDE_DIR AND HAVE_CALIBRATEDPHANTOM_LIBRARY)

# Report the results.
IF(NOT CALIBRATEDPHANTOM_FOUND)
  SET(CALIBRATEDPHANTOM_DIR_MESSAGE
    "CALIBRATEDPHANTOM was not found. Make sure CALIBRATEDPHANTOM_LIBRARY ( and/or CALIBRATEDPHANTOM_DEBUG_LIBRARY ) and CALIBRATEDPHANTOM_INCLUDE_DIR are set.")
  IF(CALIBRATEDPHANTOM_FIND_REQUIRED)
    MESSAGE(FATAL_ERROR "${CALIBRATEDPHANTOM_DIR_MESSAGE}")
  ELSEIF(NOT CALIBRATEDPHANTOM_FIND_QUIETLY)
    MESSAGE(STATUS "${CALIBRATEDPHANTOM_DIR_MESSAGE}")
  ENDIF(CALIBRATEDPHANTOM_FIND_REQUIRED)
ENDIF(NOT CALIBRATEDPHANTOM_FOUND)
